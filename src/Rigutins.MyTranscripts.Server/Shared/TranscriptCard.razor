@using Rigutins.MyTranscripts.Server.Data;

@if (Transcript != null)
{
    <div class="card shadow">
        <div class="card-header">
            <h5 class="card-title">@Transcript.Name</h5>
        </div>
        @if (Transcript.Status == TranscriptStatus.InProgress)
        {
            <div class="card-body">
                <Spinner ColorClass="text-primary" Size="40px" />
            </div>
        }
        else if (Transcript.Status == TranscriptStatus.Failed)
        {
            <div class="card-body text-danger">
                Failed
            </div>
            <div class="card-footer">
                <button class="btn btn-danger" @onclick="Remove">Remove</button>
            </div>
        }
        else if (Transcript.Status == TranscriptStatus.Completed)
        {
            <div class="card-body">
                Completed
            </div>
            <div class="card-footer">
                <button class="btn btn-primary" @onclick="Save">Save</button>
            </div>
        }
        else
        {
            <div class="card-body">
                <p class="mt-2 text-muted card-subtitle">
                    Generated on @FormateCreatedDateTime(Transcript.CreatedDateTime)
                </p>
            </div>
            <hr class="m-0" />
            <div class="card-body">
                <a href="@Transcript.OneDriveUrl" class="card-link text-decoration-none" target="_blank">Open in OneDrive</a>
            </div>
        }
    </div>
}

@code {
    [Parameter]
    public Transcript? Transcript { get; set; }

    [Parameter]
    public Action<Transcript>? OnSave { get; set; }

    [Parameter]
    public Action<Transcript>? OnRemove { get; set; }

    private string FormateCreatedDateTime(DateTimeOffset? createdDateTime)
    {
        if (createdDateTime == null)
        {
            return string.Empty;
        }

        return createdDateTime.Value.ToString("yyyy-MM-dd HH:mm");
    }

    private void Save()
    {
        if (Transcript == null)
        {
            return;
        }

        OnSave?.Invoke(Transcript);
    }

    private void Remove()
    {
        if (Transcript == null)
        {
            return;
        }

        OnRemove?.Invoke(Transcript);
    }
}
